1 ОПИС АРХІТЕКТУРИ IOT ЧАСТИНИ
 
    
	Для розробки IoT частини системи було обрано мову програмування Rust. Для демонстрації введення та виведення інформації використовується cli інтерфейс. Надсилання даних реалізовано за допомогою бібліотеки Reqwest, самі дані передаються у форматі JSON. Функціонал пристрою було реалізовано в наступних модулях:
* device_data: Цей модуль відповідає за реєстрацію пристрою на сервері та зберігання даних, які відносяться до девайсу.
*	settings: Цей модуль відповідає за зберігання,обробку та зміну налаштувань пристрою.
*	main.rs: Цей модуль надсилає оброблені дані на сервер. Він використовує бібліотеку Reqwest для надсилання HTTP-запитів.
Код програми написано та оптимізовано з урахуванням обмеженості потужності IoT пристроїв, крім того, програма легко портується на реальні IoT пристрої.


2 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


	Для розробки IoT частини системи було обрано мову програмування Rust. Rust - це системна мова програмування, яка поєднує в собі високу продуктивність, безпеку пам'яті та зручність використання. Її особливості роблять її гарним вибором для розробки вбудованого програмного забезпечення, такого як IoT пристрої. Для демонстрації введення та виведення інформації використовується cli інтерфейс.
Відправка оброблених даних на сервер реалізована за допомогою бібліотеки Reqwest. Ця бібліотека надає функції для надсилання HTTP-запитів у різних форматах, включаючи JSON.
Дані надсилаються на сервер у форматі JSON. Для серіалізації та десеріалізації даних JSON використовується бібліотека Serde.



3 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ
     

     	Користувачами Iot частини розробленої системи є 2 типи акторів: користувач та сам Iot пристрій. Користувач може : налаштовувати пристрій; Пристрій може: реєструватись та авторизовуватись на сервері, заміряти показники стану здоров'я тварини; відправляти зібрані показники на сервер. 
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див. рис. 1).


4 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
     

	IoT частина системи складається з наступних компонентів:
*	Модуль збору даних: Цей модуль відповідає за збір даних з датчиків IoT пристрою.
*	Модуль обробки даних: Цей модуль обробляє дані, зібрані модулем збору даних. Він може виконувати такі операції, як фільтрація, агрегування та перетворення даних.
*	Модуль відправки даних: Цей модуль надсилає оброблені дані на сервер. Він використовує бібліотеку Reqwest для надсилання HTTP-запитів.
Візуалізація архітектури та використаних технологій представлено на діаграмі пакетів (див. рис. 2).


5 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

     
	Взаємодія пристроя з користувачем починається з його увімкненняю Потім користувач має задати налаштування системи та підключитись до WiFi. Якщо це перше увімкнення пристрою, то він має пройти реєстрацію на сервері. Після цього пристрій може почати збір та надсилання метрик. На основі описаної взаємодії пристрою с користувачем було побудовано діаграму взаємодії (див. рис. 3).


6 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

     
	Також було побудовано діаграму діяльності, що відображає взаємодію пристрою з сервером (див. рис. 4). 


ВИСНОВКИ
 
     У ході виконання лабораторної роботи були отримані навички з проектування IoT частини програмної системи, діаграм прецедентів, пакетів, взаємодії та діяльності. Була розроблена IoT частина для контролю стану умов існування тварин на фермах.
