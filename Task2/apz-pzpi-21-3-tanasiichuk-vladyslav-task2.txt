1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
     
     
     Користувачами розробленої системи є 2 типи акторів: клієнт та адміністратор. 
Основними потребами клієнта є: можливість моніторингу стану тварин; додавання, редагування, видалення тварин; отримання показників стану здоров'я тварини в реальному часі; отримання аналізу та статистики щодо зібраних метрик: додавання, редагування нових видів тварин та норми показників для них; отримання сповіщень про незадовільний або критичний стан здоров'я тварини;
Основними потребами адміністратора є:  можливість створення резервних копій даних системи додавання, редагування нових видів тварин та норми показників для них;
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див. рис. 1).


2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ


ER-модель (див. рис. 2). складається з 7 сутностей: Animal (Тварина), AnimalSpecies (Вид тварин), Notification(Сповіщення), Role (Роль користувача), Metrics(Показники), User(Користувач), Device(Пристрій). Було виділено наступні зв’язки:
1.	Користувач (User) - Роль (Role):
•	Один до багатьох (1:N)
•	Один користувач може мати одну або декілька ролей.
•	Кожна роль може бути призначена одному або декільком користувачам.
2.	 Користувач (User) - Тварина (Animal):
•	Один до багатьох (1:N)
•	Один користувач може володіти однією або декількома тваринами.
•	Кожна тварина належить одному користувачу.
3.	 Тварина (Animal) - Вид тварини (AnimalSpecies):
•	Один до одного (1:1)
•	Кожна тварина належить одному виду тварин.
•	Кожен вид тварин може мати одну або декілька тварин.
4.	 Тварина (Animal) - Показник (Metric):
•	Один до багатьох (1:N)
•	Одна тварина може мати один або декілька показників.
•	Кожен показник належить одній тварин.
5.	 Тварина (Animal) - Пристрій (Device):
•	Один до багатьох (1:N)
•	Одна тварина може мати один або декілька пристроїв.
•	Кожен пристрій належить одній тварин.
6.	 Користувач (User) - Сповіщення (Notification):
•	Один до багатьох (1:N)
•	Один користувач може отримати одне або декілька повідомлень.
•	Кожне повідомлення може бути направлене одному користувачу.
7.	 Тварина (Animal) - Сповіщення (Notification):
•	Один до багатьох (1:N)
•	Одна тварина може бути згадана в одному або декількох повідомленнях.
•	Кожне повідомлення може стосуватися однієї або декількох тварин.


3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ
     
     
У застосунку було використано архітектурний шаблон Clean Architecture. Застосунок складається з 5 шарів: Presentation Layer, Application Layer, Domain Layer та Data Access Layer. 
• Presentation layer включає в себе контролери, які приймають та оброблюють запити від користувачів.
•	Цей шар відповідає за взаємодію з користувачем через контролери API.
•	Контролери приймають HTTP-запити, обробляють їх та повертають відповіді.
•	Цей шар не містить жодної бізнес-логіки, а лише делегує її сервісам Application Layer. 
• Application layer містить сервіси, що реалізують бізнес-логіку додатку.
•	Цей шар містить сервіси, які реалізують бізнес-логіку додатку.
•	Сервіси використовують сутності Domain Layer для виконання своїх функцій.
•	Цей шар не залежить від будь-яких технологій зберігання даних або інтерфейсів користувача.
• Domain layer визначає сутності застосунку. 
•	Цей шар визначає сутності та правила бізнес-домену.
•	Сутності представляють ключові поняття та їх атрибути.
•	Правила визначають поведінку та обмеження для сутностей.
•	Цей шар не залежить від жодних технологій реалізації.
• Data access layer відповідає за доступ до даних, для цього було використано PrismaORM.
•	Цей шар відповідає за доступ до даних, використовуючи PrismaORM.
•	Він використовує інтерфейси та сутності Domain Layer для взаємодії з базою даних.
•	Цей шар абстрагує деталі реалізації зберігання даних від інших шарів.
UML діаграма пакетів програмної системи для відстеження фізичного стану велосипедистів зображена у додатку A.
Для розробки серверної частини системи обрано мову програмування TypeScript та фреймворк Nest.js. 
Для зберігання даних обрано базу даних PostgreSQL, адже вона гарантує високу надійність, масштабованість та підтримку ACID-транзакцій, а також СУБД Prisma. 
Для забезпечення інтернаціоналізації, в базі даних можуть зберігатись тексти з символами будь-якої мови, а також всі дати будуть зберігатись в форматі UTC. 
Для забезпечення локалізації було використано метод рядкової локалізації, коли записи для різних мов зберігаються в базі даних.
UML діаграма розгортання програмної системи для відстеження фізичного стану велосипедистів зображена у додатку Б.


4 СПЕЦИФІКАЦІЯ REST
     
     
    REST API застосунку складається з 20 кінцевих точок. Специфікацію кожної з кінцевих точок наведено в таблиці 1.
    Таблиця 1 – Специфікація REST API

     
ВИСНОВКИ
 
     
     У ході виконання лабораторної роботи були отримані навички з проектування серверної частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проектуванні бази даних. Була розроблена серверна частина для контролю стану умов існування тварин на фермах.
