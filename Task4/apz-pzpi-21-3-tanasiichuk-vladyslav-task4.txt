1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ
     

	Для написання клієнтської частини системи було обрано мову програмування TypeScript з використанням Next.js, фреймворку для React, що забезпечує високу продуктивність додатку та зручність у розробці та тестуванні за рахунок статичної типізації та компонентного підходу. Next.js зокрема надає власну, вже реалізовану систему навігації по сайту.
Також Next.js надає власний компілятор та пакувальник Turbopack, які значно швидші за аналоги.
Для реалізації елементів інтерфейсу було використано бібліотеку Material UI, яка  надає стилізовані компоненти інтерфейсу, в загальному дизайні, який розробили в компанії Google. 
Для реалізації локалізації інтерфейсу було використано бібліотеку i18next, що легко інтегрується до проекту та реалізує зручний підхід до локалізації. 
Для виконання асинхронних запитів на сервер використано вбудований в JavaScript метод fetch, який не потребує додаткових бібліотек. 
Візуалізація архітектури та використаних технологій представлено на діаграмі пакетів (див. рис. 2)


2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ
  
   
     	Користувачами розробленої системи є 2 типи акторів: клієнт та адміністратор. 
Основними потребами клієнта є: 
*	можливість моніторингу стану тварин;
*	додавання, редагування, видалення тварин;
*	отримання показників стану здоров'я тварини в реальному часі;
*	отримання аналізу та статистики щодо зібраних метрик:
*	додавання, редагування нових видів тварин та норми показників для них;
*	отримання сповіщень про незадовільний або критичний стан здоров'я тварини;
Основними потребами адміністратора є: 
*	можливість створення резервних копій даних системи
*	додавання, редагування нових видів тварин та норми показників для них;
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див. рис. 1).


3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
 

Для написання клієнтської частини системи було обрано мову програмування TypeScript з використанням Next.js, фреймворку для React, що забезпечує високу продуктивність додатку та зручність у розробці та тестуванні за рахунок статичної типізації та компонентного підходу. Next.js зокрема надає власну, вже реалізовану систему навігації по сайту.
Також Next.js надає власний компілятор та пакувальник Turbopack, які значно швидші за аналоги.
Для реалізації елементів інтерфейсу було використано бібліотеку Material UI, яка  надає стилізовані компоненти інтерфейсу, в загальному дизайні, який розробили в компанії Google. 
Для реалізації локалізації інтерфейсу було використано бібліотеку i18next, що легко інтегрується до проекту та реалізує зручний підхід до локалізації. 
Для виконання асинхронних запитів на сервер використано вбудований в JavaScript метод fetch, який не потребує додаткових бібліотек. 
Візуалізація архітектури та використаних технологій представлено на діаграмі пакетів (див. рис. 2)


4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

 
	Також для більш детальної візуалізації архітектури системи та взаємодії її частин було розроблено діаграму компонентів (див. рис. 4).


5 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ


	Взаємодія користувача з сайтом починається з входу у систему. Потім взаємодія користувача розділяється на адміністраторську та клієнтську ролі. Клієнт може переглядати та керувати списком тварин (створювати, редагувати, видаляти), а також переглядати детальну статистику та аналіз показників кожної з тварин. Також користувач може переглядати сповіщення про стан тварин, які йому надсилає програмна система. Адміністратор може експортувати базу даних, для резервного копіювання. В незалежності від ролі користувачі можуть переглядати та керувати видами тварин, які доступні в системі(клієнт лише власні, адмін будь-які). На основі описаної взаємодії пристрою с користувачем було побудовано діаграму взаємодії (див. рис. 3)


ВИСНОВКИ


     У ході виконання лабораторної роботи були отримані навички з проектування клієнтської частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проектуванні бази даних. Була розроблена серверна частина для контролю стану умов існування тварин на фермах.
